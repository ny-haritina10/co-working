Add a button `Payé` on each rows of the table reservations.

Use this API endpoint:
POST http://localhost:8000/api/front-office/reservations/{id_reservation}/pay
{
    "id_client": {id_client}, // from connected client
    "id_reservation": {id_reservation}  // from the reservations table 
}

Here is the returned data after accessing this endpoint: 
{
    "message": "Payment processed successfully",
    "data": {
        "id_reservation": 15,
        "reference": "PAY-20250226-BESP4",
        "date_paiement": "2025-02-26T00:00:00.000000Z",
        "updated_at": "2025-02-26T12:57:13.000000Z",
        "created_at": "2025-02-26T12:57:13.000000Z",
        "id": 10
    }
}

Display a pop up (not JS alert) to tell that the Payment has been successfull.

Here is the VueJS 3 component code:
```
<template>
  <div class="home-container">
    <!-- Navbar -->
    <Navbar :client="client" @logout="logout" />
    
    <!-- Main Content -->
    <div class="container main-content">
      <div class="row">
        <!-- Sidebar -->
        <div class="col-lg-3 mb-4">
          <Sidebar :client="client" currentPage="reservation" />
        </div>
                
        <!-- Main Reservation Content -->
        <div class="col-lg-9">
          <div class="dashboard-header">
            <h2>My Bookings</h2>
            <p class="dashboard-date">{{ currentDate }}</p>
          </div>
          
          <!-- Reservations Card -->
          <div class="profile-card">
            <div class="profile-header">
              <h4><i class="bi bi-calendar-check me-2"></i>My Reservations</h4>
            </div>
            
            <div class="profile-body">
              <!-- Loading State -->
              <div v-if="loading" class="text-center my-5">
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading your reservations...</p>
              </div>
              
              <!-- Error State -->
              <div v-else-if="error" class="alert alert-danger">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                {{ error }}
              </div>
              
              <!-- Empty State -->
              <div v-else-if="reservations.length === 0" class="alert alert-info">
                <i class="bi bi-info-circle-fill me-2"></i>
                You don't have any reservations yet.
              </div>
              
              <!-- Reservations Table -->
              <div v-else class="table-responsive">
                <table class="table table-hover">
                  <thead class="table-light">
                    <tr>
                      <th>Date</th>
                      <th>Time</th>
                      <th>Duration</th>
                      <th>Options</th>
                      <th>Amount</th>
                      <th>Status</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr v-for="(reservation, index) in reservations" :key="index">
                      <td>
                        <span class="fw-medium">{{ formatDate(reservation.reservation_date) }}</span>
                      </td>
                      <td>
                        <i class="bi bi-clock me-1"></i>
                        {{ reservation.hour_begin }} - {{ reservation.hour_end }}
                      </td>
                      <td>
                        {{ reservation.duration }} hour{{ reservation.duration > 1 ? 's' : '' }}
                      </td>
                      <td>
                        <div v-if="reservation.options.length > 0">
                          <span v-for="(option, optIndex) in reservation.options" :key="optIndex" 
                                class="badge bg-light text-dark me-1 mb-1">
                            <i class="bi bi-gear-fill me-1 small"></i>{{ option }}
                          </span>
                        </div>
                        <span v-else class="text-muted">No options</span>
                      </td>
                      <td>
                        <span class="fw-medium">{{ formatCurrency(reservation.reservation_amount) }}</span>
                      </td>
                      <td>
                        <span class="badge" :class="getStatusBadgeClass(reservation.status)">
                          <i class="bi" :class="getStatusIconClass(reservation.status)"></i>
                          {{ reservation.status }}
                        </span>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { ref, onMounted } from 'vue';
import axios from 'axios';
import Sidebar from '../panel/Sidebar.vue';
import Navbar from '../panel/Navbar.vue';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap-icons/font/bootstrap-icons.css';

export default {
  name: 'Reservation',
  components: {
    Sidebar,
    Navbar
  },
  setup() {
    // Create refs for component state
    const reservations = ref([]);
    const loading = ref(true);
    const error = ref('');
    const client = ref(null);
    const currentDate = ref(new Date().toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    }));
    
    // Create axios instance within setup
    const apiClient = axios.create({
      baseURL: 'http://localhost:8000/api',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    });
    
    // Set auth token if exists
    const token = localStorage.getItem('token');
    if (token) {
      apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;
    }

    // Get client data from localStorage
    const getClient = () => {
      const clientData = localStorage.getItem('client');
      if (clientData) {
        client.value = JSON.parse(clientData);
        return client.value;
      }
      return null;
    };

    const fetchReservations = async () => {
      loading.value = true;
      error.value = '';
      
      const userData = getClient();
      
      if (!userData || !userData.id) {
        error.value = 'User data not found. Please login again.';
        loading.value = false;
        return;
      }
      
      try {
        // Using the apiClient instance created in setup
        const response = await apiClient.get(`/front-office/clients/${userData.id}/reservations`);
        
        if (response.data && response.data.data) {
          reservations.value = response.data.data;
        } else {
          error.value = 'Invalid data structure returned from API';
        }
      } catch (err) {
        error.value = err.response?.data?.message || 'Failed to load reservations. Please try again later.';
        console.error('Error fetching reservations:', err);
      } finally {
        loading.value = false;
      }
    };

    const formatDate = (dateString) => {
      const options = { year: 'numeric', month: 'long', day: 'numeric' };
      return new Date(dateString).toLocaleDateString(undefined, options);
    };

    const formatCurrency = (amount) => {
      return new Intl.NumberFormat('fr-FR', { 
        style: 'currency', 
        currency: 'MGA' 
      }).format(amount);
    };

    const getStatusBadgeClass = (status) => {
      switch (status.toLowerCase()) {
        case 'fait':
          return 'bg-success';
        case 'annulé':
          return 'bg-danger';
        case 'en attente':
          return 'bg-warning text-dark';
        case 'confirmé':
          return 'bg-info text-dark';
        default:
          return 'bg-secondary';
      }
    };

    const getStatusIconClass = (status) => {
      switch (status.toLowerCase()) {
        case 'fait':
          return 'bi-check-circle-fill me-1';
        case 'annulé':
          return 'bi-x-circle-fill me-1';
        case 'en attente':
          return 'bi-hourglass-split me-1';
        case 'confirmé':
          return 'bi-check2-all me-1';
        default:
          return 'bi-circle-fill me-1';
      }
    };
    
    const logout = () => {
      localStorage.removeItem('token');
      localStorage.removeItem('client');
      window.location.href = '/';
    };

    onMounted(() => {
      fetchReservations();
      getClient();
    });

    return {
      reservations,
      loading,
      error,
      client,
      currentDate,
      formatDate,
      formatCurrency,
      getStatusBadgeClass,
      getStatusIconClass,
      logout
    };
  }
};
</script>

<style scoped>
    ... existing style
</style>
```